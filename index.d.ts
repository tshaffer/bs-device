// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../redux
//   ../../@brightsign/bsdatamodel

import { Action, Dispatch, ActionCreator } from 'redux';
import { Reducer } from 'redux';
import { DmState } from '@brightsign/bsdatamodel';

/** @module Model:index */

/** @module Types:index */

/** @module Model:base */
/** @private */
export const BRIGHTSIGN_PLAYER_MODEL_BATCH = "BRIGHTSIGN_PLAYER_MODEL_BATCH";
/** @private */
export const BRIGHTSIGN_PLAYER_MODEL_REHYDRATE = "BRIGHTSIGN_PLAYER_MODEL_REHYDRATE";
/** @private */
export const BRIGHTSIGN_PLAYER_MODEL_RESET = "BRIGHTSIGN_PLAYER_MODEL_RESET";
/** @private */
export type BsBrightSignPlayerModelDispatch = Dispatch<any>;
/** @private */
export interface BsBrightSignPlayerModelBaseAction extends Action {
    type: string;
    payload: {};
    error?: boolean;
    meta?: {};
}
/** @private */
export interface BsBrightSignPlayerModelAction<T> extends BsBrightSignPlayerModelBaseAction {
    payload: T;
}
/** @private */
export type BsBrightSignPlayerActionCreator<T> = ActionCreator<BsBrightSignPlayerModelAction<T>>;
/** @private */
export type BsBrightSignPlayerModelThunkAction<T> = (dispatch: BsBrightSignPlayerModelDispatch, getState: () => BsBrightSignPlayerModelState, extraArgument: undefined) => T;
/** @private */
export const bsBrightSignPlayerBatchAction: (action: BsBrightSignPlayerModelBaseAction[]) => BsBrightSignPlayerModelBatchAction;
/** @private */
export interface BsBrightSignPlayerModelBatchAction extends Action {
    type: string;
    payload: BsBrightSignPlayerModelBaseAction[];
}
/** @private */
export interface RehydrateBsBrightSignPlayerModelParams {
    newBsBrightSignPlayerModelState: BsBrightSignPlayerModelState;
}
/** @private */
export type RehydrateBsBrightSignPlayerModelAction = BsBrightSignPlayerModelAction<RehydrateBsBrightSignPlayerModelParams>;
export const bsBrightSignPlayerRehydrateModel: (bsBrightSignPlayerState: BsBrightSignPlayerModelState) => RehydrateBsBrightSignPlayerModelAction;
/** @private */
export type ResetBsBrightSignPlayerModelAction = BsBrightSignPlayerModelAction<null>;
export const bsBrightSignPlayerResetModel: () => ResetBsBrightSignPlayerModelAction;

/** @module Model:base */
/** @private */
export type BsBrightSignPlayerReducer = Reducer<BsBrightSignPlayerModelState>;
/** @private */
export const enableBatching: (reduce: (state: BsBrightSignPlayerModelState, action: BsBrightSignPlayerModelBaseAction | BsBrightSignPlayerModelBatchAction) => BsBrightSignPlayerModelState) => BsBrightSignPlayerReducer;
export const bsBrightSignPlayerReducer: Reducer<BsBrightSignPlayerModelState>;
/** @private */
export function isValidBsBrightSignPlayerModelState(state: any): boolean;
/** @private */
export function isValidBsBrightSignPlayerModelStateShallow(state: any): boolean;

/** @module Model:template */
/** @private */
export const ADD_HSM: string;
/** @private */
export type AddHsmAction = BsBrightSignPlayerModelAction<Partial<HSM>>;
/** @private */
export function addHSM(hsm: HSM): AddHsmAction;
/** @private */
export const hsmReducer: (state: HSMList | undefined, action: BsBrightSignPlayerModelBatchAction) => HSMList;
/** @private */
export const isValidHSMs: (state: any) => boolean;

/** @module Types:base */
/** @private */
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
/** @private */
export interface BsBrightSignPlayerState {
    bsdm: DmState;
    bsPlayer: BsBrightSignPlayerModelState;
}
/** @private */
export interface BsBrightSignPlayerModelState {
    hsms: HSM[];
}

/** @private */
export interface HSM {
    readonly hsmId: string;
}
export type HSMList = HSM[];

